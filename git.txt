查看某个时间点以后的log

git log --since="Fri Aug 10 19:16:10 2012 +0800" 

或者用--until 查看某个时间点以前的log

git log --before="Fri Aug 10 19:16:10 2012 +0800" 
git log --before 2019-01-01

获取某个时间点以后的commit，-n 1 表示只返回一个，最近的一个

git rev-list -n 2  --since="Fri Aug 10 19:16:10 2012 +0800" yourbranch

获取某个时间点以前的commit，-n 1 表示只返回一个，最近的一个 youbranch 为对应的分支名

git rev-list -n 2  --before="Fri Aug 10 19:16:10 2012 +0800" yourbranch

同步某个时间点前的代码，可用于追溯验证问题

repo forall -c "git checkout `git rev-list -n 1 --before=\"Fri Jun 29 15:53:40 2012 +0800\" yourbranch`"

 # 删除 untracked files
git clean -f
 
# 连 untracked 的目录也一起删掉
git clean -fd
 
# 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）
git clean -xfd
 
# 在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删
git clean -nxfd
git clean -nf
git clean -nfd


git clean -nf # 删除 untracked files
git clean -nfd # 连 untracked 的目录也一起删掉，加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删


git stash 
git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。
git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。
git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。
git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。
