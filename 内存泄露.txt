１，对context引用的静态变量可能会造成内存泄露；
２，单例模式     的生命周期和Application保持一直，因此如果有Activity的实例应用，Activity对象无法被即时的释放。导致内存泄露。
３，属性动画在不可见时仍然在执行；
４，bitmap没有及时recycle();
５，有未处理的message，message含有对目标handler的引用，handler含有对context的引用。


1,finish（）方法用于结束一个Activity的生命周期，而onDestory()方法则是Activity的一个生命周期方法，其作用是在一个Activity对象被销毁之前，Android系统会调用该方法，用于释放此Activity之前所占用的资源。
2,
Activity.finish()
Call this when your activity is done and should be closed.
在你的activity动作完成的时候，或者Activity需要关闭的时候，调用此方法。
当你调用此方法的时候，系统只是将最上面的Activity移出了栈，并没有及时的调用onDestroy()方法，其占用的资源也没有被及时释放。因为移出了栈，所以当你点击手机上面的“back”按键的时候，也不会再找到这个Activity。
Activity.onDestroy()
the system is temporarily destroying this instance of the activity to save space.
系统销毁了这个Activity的实例在内存中占据的空间。
在Activity的生命周期中，onDestory()方法是他生命的最后一步，资源空间等就被回收了。当重新进入此Activity的时候，必须重新创建，执行onCreate()方法。‍
3,你可以在 onPause() 方法里面判断 isFinishing() ，正常调用 finish() 后 activity 的回调过程是 onPause、onStop、onDestroy ，倘若出现上面的情况，只到 onPause！但是 isFinishing() 标志还是为 true ！你可以释放资源了。
4,onDestroy()
Perform any final cleanup before an activity is destroyed. This can happen either because the activity is finishing (someone called finish() on it, or because the system is temporarily destroying this instance of the activity to save space. You can distinguish between these two scenarios with the isFinishing() method. 
5,内存泄漏的时候onDestroy()也会执行，但是在onDestroy中释放资源仍然可能导致泄漏，因为onDestroy可能会不执行。
